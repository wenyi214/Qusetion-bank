//状态定义 ：
//可以用一个二维数组保持结果。二维数组有i行，两列。第一列代表持有股票的最大价值。第二列代表不持有股票的最大价值。
//dp[i][0]  第i天持有股票的最大价值（最小成本）
//dp[i][1] 第i天不持有股票的最大价值（最大收益）

//转移方程：
//持有股票，说明买入股票，价值应该是负的。如果当天买入股票为 - price[i]。但是可以不是当天买入的股票。可以是在价格最低点买入的股票。持有股票的最大价值，就是最低点买入的股票。所以持有股票最大价值为：dp[i][0] = max(-price[i]，dp[i - 1][0]）。当天买入与之前买入的最大值
//不持有股票，说明是卖出股票，如果当天卖出股票，价值是dp[i][0] + price[i]。但是也可以不在当天卖出，可以在价格最高点的时候卖出。不持有股票时的最大价值就是在最高点卖出。所以不持有股票的最大值价值为：dp[i][1] = max(dp[i - 1]，dp[i][0] + price[i])。当天卖出的价值与之前卖出价值最大值。我的理解dp[i][0] + prices[i]，当天卖出价值，为当天买入价值加上股票价值

//初始化：
//第一天持有股票，只能是买入股票，因为没有之前的对比。dp[1][0] = -price[0]
//第一天不持有股票的最大价值，只能是将持有股票的卖出。dp[1][1] = dp[1][0] + price[0] = 0

//返回值：
//最后一天不持有股票的最大价值dp[price.size()][1]。
class Solution {
public:
	//用列为0的表示持有股票的最大价值，用列为1表示不持有股票的最大价值
	int maxProfit(vector<int>& prices) {
		int len = prices.size();
		vector<vector<int>> dp(len + 1, vector<int>(2, 0));
		//dp[0][0]=0;
		//dp[0][1]=0;
		//持有第一的股票，价值就是买入股票
		dp[1][0] = -prices[0];
		//卖出，价值为0
		dp[1][1] = 0;
		//递推公式
		for (int i = 2; i <= len; i++){
			dp[i][0] = max(dp[i - 1][0], -prices[i - 1]);
			dp[i][1] = max(dp[i - 1][1], prices[i - 1] + dp[i][0]);
		}
		return dp[len][1];

	}
};
