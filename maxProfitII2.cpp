//状态定义：
//
//状态一：dp[i][0] ：买入
//
//卖出包括两种情况
//
//状态二：dp[i][1]：之前已经卖出，已经度过冷冻期，但是不操作。
//
//状态三：dp[i][2]：当天卖出
//
//状态四：dp[i][3]：处于冷冻期
//
//转移方程：
//
//买入：
//
//情况一：前一天为冷冻期  dp[i - 1][3] - prices[i]。
//
//情况二：前一天不是冷冻期，但是也没有卖出(处于状态二)，dp[i - 1][1] - prices[i]。
//
//情况三：之前已经买入，dp[i - 1][0]。
//
//dp[i][0] = max(dp[i - 1][0]，max(dp[i - 1][3] - prices[i]，dp[i - 1][1] - prices[i])
//
//卖出：
//
//状态二：之前已经卖出，已经度过冷冻期，但是不操作（前一天是冷冻期）。
//
//情况一：前一天是冷冻期，dp[i - 1][3]。
//
//情况二：还是没有操作，dp[i - 1][2]。
//
//dp[i][1] = max(dp[i - 1][3]，dp[i - 1][2])
//
//状态三：当天卖出
//
//情况一：当天卖出，dp[i][2] = dp[i][0] + prices[i]。
//
//冷冻期：
//
//情况一：前一天肯定是卖出：dp[i][3] = dp[i - 1][2].
//
//初始化：
//
//第一天买入dp[1][0] = -prices[i - 1]，
//
//第一天卖出dp[1][1] = 0，dp[1][2] = 0，第一天卖出价格收益也是0
//
//冷冻期 dp[1][3] = 0，第一天不存在冷冻期的情况
//
//返回值 为卖出和冷冻期(可能请一天卖出最后一天是冷冻期)里最大的。
//
//max(dp[len][1], max(dp[len][3], dp[len][2]));

class Solution {
public:
	int maxProfit(vector<int>& prices) {
		int len = prices.size();
		vector<vector<int>> dp(len + 1, vector<int>(4, 0));
		//初始化
		dp[1][0] = -prices[0];
		dp[1][1] = 0;
		dp[1][2] = 0;
		dp[1][3] = 0;

		// dp[i][0] ：买入
		//dp[i][1]：之前已经卖出，已经度过冷冻期，但是不操作。
		//dp[i][2]：当天卖出
		//dp[i][3]：处于冷冻期
		for (int i = 2; i <= len; i++){

			dp[i][0] = max(dp[i - 1][0], max(dp[i - 1][3] - prices[i - 1], dp[i - 1][1] - prices[i - 1]));
			dp[i][1] = max(dp[i - 1][1], dp[i - 1][3]);
			dp[i][2] = dp[i][0] + prices[i - 1];//当天一点是卖出，不需要于前一天比

			dp[i][3] = dp[i - 1][2];//前一天一定是卖出
		}
		return max(dp[len][1], max(dp[len][3], dp[len][2]));

	}
};
